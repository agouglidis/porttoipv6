/***************************************************************************
 *   Copyright (C) 2005-2017 by Antonios Gouglidis			   			   *
 *   e-mail: agouglidis@gmail.com   					   				   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

// Include files

#ifdef __CYGWIN__
using namespace std;
#endif /* __CYGWIN__ */

#include <iostream>
#include <string>

#include "../include/common.h"
#include "../tinyxml/tinyxml.h"
#include "mappers/PfMapperBsd.h"
#include "mappers/PfMapperWinsock.h"

/*! \fn int initScanner(int argc, char** argv)
	\brief Initialise Scanner variables based on given commands
	\param argc 
	\param argv
	\return int
 */
int initScanner(int argc, char** argv);

/*! \fn void helpScreen(void)
	\brief Prints help screen
	\return void
 */
void helpScreen(void);

// Variables
const string& PF_SCANNER_VERSION = "0.0.5"; /*!< Contains scanner version*/
const string& PF_SCANNER_NAME = "ipv6cg"; /*!< Contains scanner name */

string	gSrcFile = ""; /*!< Contains the name of the ipv4 source file*/
string	gXmlFile = ""; /*!< Contains the name of the xml metadata file*/
string	gOutFile = ""; /*!< Contains user defined filename for the generated ipv6 file*/

/*! \fn int main(int argc, char** argv)
	\brief The main programme
	\param argc Number of parameters
	\param argv Contains the string of the parameters
	\return Error codes, and 0 for success
*/
int main(int argc, char** argv)
{
	/* Initialize global variables */
	#include_verbatim "../patterns/cpp/Apis.def"

	setGlobalActiveApi(0);
	initScanner(argc, argv);

	switch (getGlobalActiveApi())
	{
		case 0: /* The BSD api is in use*/
		{
			PfMapperBsd* mapper = new PfMapperBsd(gSrcFile, gXmlFile, gOutFile);
			std::cout << "\nPorting code. Mapper in use: " << mapper->getMapper() << "\n";
			mapper->iterateFiles();
			delete mapper;
			break;
		}
		case 1: /* The Winsock api is in use */
		{
			PfMapperWinsock* mapper = new PfMapperWinsock(gSrcFile, gXmlFile, gOutFile);
			std::cout << "\nPorting code. Mapper in use: " << mapper->getMapper() << "\n";
			mapper->iterateFiles();
			delete mapper;
			break;
		}
		default:
			std::cerr << "\nUnsupported API. Use " << PF_SCANNER_NAME << " -l for a list of supported APIs.";
	}
	return PF_SUCCESS;
}

void helpScreen(void)
{
	using std::cout;

	cout << PF_SCANNER_NAME << " - An integral part of PortToIPv6 framework\n";
	cout << PF_COPYRIGHT << "\n\n";
	
	cout << PF_SCANNER_NAME <<" --apiNUMBER -s source -x xml -o output\n";
	cout << "\t-h\t\tproduce this help message\n";	
	cout << "\t-o\t\tdefine name of output ipv6 source file\n";
	cout << "\t-l\t\ttake a list of current compiled API's\n";
	cout << "\t-s\t\toriginal ipv4 source file\n";
	cout << "\t-x\t\txml file generated from ipv4scanner\n";
	cout << "\t--apiNUMBER\tUse -l to get a list of available APIs (default is 0)\n";
	cout << "\t--help\t\tproduce this help message\n";
	cout << "\t--version\treport " << PF_SCANNER_NAME << " version\n";
	cout << "\t-?\t\tproduce this help message\n";
}

void printAPIs(void)
{
	using std::cout;

	cout << "List of current compiled APIs:\n";
	for (unsigned int i=0; i<gVectorApis.size(); i++)
	{
		cout << "\tuse --api" << i << " for: " << gVectorApis[i].name << "\n";
	}
}

int initScanner(int argc, char** argv)
{
	const char* arg;
	bool argParam = false;
	char parameter = ' ';
	short int pos = 0;
	bool bParam01 = false;
	bool bParam02 = false;
	bool bParam03 = false;
	string sNumOfApi;
	unsigned int iNumOfApi;

	for (--argc, ++argv; argc; --argc, ++argv)
	{
		arg = argv[0];

		if (arg[0] != '-' || arg[1] == '\0')
		{
			argParam = true;
		}

		if (!argParam)
		{
			if ( arg[1] == '-' )
			{
				if (!strcmp(arg, "--help"))
					arg = "-h";
				else if (!strcmp(arg,"--version"))
					arg = "-v";
				else if (findString(arg,"--api"))
				{
					sNumOfApi = removeString(arg, "--api");
					iNumOfApi = atoi(sNumOfApi.c_str());
					arg = "-a";
				}
				else if (!strcmp(arg, "--" ))
					{
						--argc;
						++argv;
						break;
					}
			}
			
			for (int i=1; arg[i] != '\0'; ++i)
				switch (arg[i])
				{
					case '?':
					case 'h':
						helpScreen();
						exit (PF_SUCCESS);

					case 'v':
						std::cout << PF_NAME << " version " << PF_VERSION << " Release " << PF_RELEASE << "\n";
						std::cout << PF_SCANNER_NAME << " version " << PF_SCANNER_VERSION << "\n";
						exit (PF_SUCCESS);
	
					case 's':
						argParam = true;
						parameter = 's';
						pos = i;
						bParam01 = true;
						break;
	
					case 'x':
						argParam = true;
						parameter = 'x';
						pos = i;
						bParam02 = true;
						break;

					case 'o':
						argParam = true;
						parameter = 'o';
						pos = i;
						bParam03 = true;
						break;

					case 'l':
						printAPIs();
						exit (PF_SUCCESS);

					case 'a':
						if (iNumOfApi>gVectorApis.size()-1)
						{
							std::cerr << "\nNot a supported API.\n";
							exit(PF_ERROR);
						}
						setGlobalActiveApi(iNumOfApi);
						break;

					default:
						std::cerr << PF_SCANNER_NAME << ": unknown flag " << arg[i] << ".  For usage, try\n\t"<< PF_SCANNER_NAME << " --help\n";
						exit (PF_ERROR);
				}
				
		} /* if (!argParam) */
		
		if (argParam)
		{
			if (parameter == 's')
				{if (strcmp(argv[pos-1],"-s")) gSrcFile = argv[pos-1];}
			else if (parameter == 'x')
				{if (strcmp(argv[pos-1],"-x")) gXmlFile = argv[pos-1];}
			else if (parameter == 'o')
				{if (strcmp(argv[pos-1],"-o")) gOutFile = argv[pos-1];}
			argParam = false;
		}
	}
	// check if all required parameters are declared
	if (!bParam01 || !bParam02 || !bParam03) 
	{
		std::cerr << "\n" << PF_SCANNER_NAME << " encounter an error: check given parameters." << " For usage, try\n\t" << PF_SCANNER_NAME << " --help\n";
		exit (PF_ERROR);
	}	
	return PF_SUCCESS;
}

